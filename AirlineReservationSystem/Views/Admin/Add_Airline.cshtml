@model AirlineReservationSystem.Models.Airline
@{
    Layout = "_AdminLayout";
}

<link href="~/css/imageUpload.css" rel="stylesheet">
<div class="pagetitle">
    <h1>Add Airline</h1>
</div><!-- End Page Title -->

<section class="section">
    <div class="row">
        <div class="col-lg-12">

            <div class="card">
                <div class="card-body">
                    <form class="row g-3 needs-validation" novalidate asp-controller="Admin" asp-action="Add_Airline" enctype="multipart/form-data" onsubmit="return validateForm()">
                        <h5 class="card-title">Add A New Airline</h5>
                        <div class="col-lg-12">
                            <div class="box" style="margin-bottom:10px;">
                                <div class="js--image-preview"></div>
                                <div class="upload-options">
                                    <label>
                                        <input type="file" id="airlineImage" required class="image-upload" accept="image/*" asp-for="AilrineImagePath">
                                        <span asp-validation-for="AilrineImagePath" class="text-danger"></span>
                                    </label>
                                    
                                </div>
                                
                            </div>
                        </div>
                        <div id="imageError" class="alert alert-danger mt-3" style="display:none;">
                            Invalid image format. Please upload a valid image file.
                        </div>
                        <!-- Custom Styled Validation -->
                        <div class="col-md-4">
                            <label for="validationCustom01" class="form-label">Airline Name</label>
                            <input type="text" class="form-control" id="validationCustom01" required asp-for="AirlineName" onch="validateForm()">
                            <span asp-validation-for="AirlineName" class="text-danger"></span>
                            <div class="valid-feedback">
                                Looks good!
                            </div>
                        </div>

                        <div class="my-3">
                            @if (TempData["airlineError"] != null)
                            {
                                <div class="alert alert-danger d-flex align-items-center gap-3" role="alert">
                                    <i class="bi bi-exclamation-triangle-fill fs-4"></i>
                                    @TempData["airlineError"]
                                </div>
                            }
                        </div>

                        <div class="col-12 d-flex justify-content-end">
                            <button class="btn btn-primary w-100" onclick="validateForm()" type="submit">Add Airline</button>
                        </div>
                    </form><!-- End Custom Styled Validation -->
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    function validateForm() {
        const imageInput = document.getElementById('airlineImage');
        const imageError = document.getElementById('imageError');
        imageError.style.display = 'none'; // Hide previous error message

        if (imageInput.files.length === 0) {
            imageError.textContent = 'Please select an image.';
            imageError.style.display = 'block'; // Show error message
            return false; // Prevent form submission
        }

        return true; // Allow form submission if image is selected
    }

    function initImageUpload(box) {
        let uploadField = box.querySelector('.image-upload');

        uploadField.addEventListener('change', getFile);

        function getFile(e) {
            let file = e.currentTarget.files[0];
            checkType(file);
        }

        function previewImage(file) {
            let thumb = box.querySelector('.js--image-preview'),
                reader = new FileReader();

            reader.onload = function () {
                thumb.style.backgroundImage = 'url(' + reader.result + ')';
            }
            reader.readAsDataURL(file);
            thumb.className += ' js--no-default';
        }

        function checkType(file) {
            let imageType = /image.*/;
            if (!file.type.match(imageType)) {
                throw 'File is not an image';
            } else if (!file) {
                throw 'No image chosen';
            } else {
                previewImage(file);
            }
        }
    }

    var boxes = document.querySelectorAll('.box');
    for (let i = 0; i < boxes.length; i++) {
        let box = boxes[i];
        initDropEffect(box);
        initImageUpload(box);
    }

    function initDropEffect(box) {
        let area, drop, areaWidth, areaHeight, maxDistance, dropWidth, dropHeight, x, y;
        area = box.querySelector('.js--image-preview');
        area.addEventListener('click', fireRipple);

        function fireRipple(e) {
            area = e.currentTarget;
            if (!drop) {
                drop = document.createElement('span');
                drop.className = 'drop';
                this.appendChild(drop);
            }
            drop.className = 'drop';

            areaWidth = getComputedStyle(this, null).getPropertyValue("width");
            areaHeight = getComputedStyle(this, null).getPropertyValue("height");
            maxDistance = Math.max(parseInt(areaWidth, 10), parseInt(areaHeight, 10));

            drop.style.width = maxDistance + 'px';
            drop.style.height = maxDistance + 'px';

            dropWidth = getComputedStyle(this, null).getPropertyValue("width");
            dropHeight = getComputedStyle(this, null).getPropertyValue("height");

            x = e.pageX - this.offsetLeft - (parseInt(dropWidth, 10) / 2);
            y = e.pageY - this.offsetTop - (parseInt(dropHeight, 10) / 2) - 30;

            drop.style.top = y + 'px';
            drop.style.left = x + 'px';
            drop.className += ' animate';
            e.stopPropagation();
        }
    }
</script>
